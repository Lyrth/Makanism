
apply from: 'dependencies.gradle'
apply from: 'extern.gradle'

ext {
    jdk = '1.11'
    
    absoluteOutputDir = "$rootDir/$outputDir" as String
    absoluteOutputLibDir = "$absoluteOutputDir/$outputLibDir" as String
}

allprojects {
    apply plugin: 'java'

    sourceCompatibility = jdk
    targetCompatibility = jdk

    group = artifact_group
    version = project_version
}

subprojects {
    archivesBaseName = "makanism-$project.name"

    jar {
        manifest {
            attributes(
                    'Implementation-Title': archivesBaseName,
                    'Implementation-Version': archiveVersion
            )
        }
    }
}

dependencies {
    implementation project(':api')
    implementation project(':common')
    runtimeOnly project(':bot')
}

jar.enabled = false     // disable jar creation for root project

def FINAL_TASKS = 'Finalizing tasks'
task copyDeps { group = FINAL_TASKS
    mkdir absoluteOutputDir
    mkdir absoluteOutputLibDir
    inputs .dir(absoluteOutputLibDir)
    outputs.dir(absoluteOutputLibDir)
    doLast {
        println "Copying dependencies into ${absoluteOutputLibDir}..."
        copy {  // copy the dependencies
            from configurations.runtimeClasspath
            into absoluteOutputLibDir
        }
    }
}

task removeUnneeded { group = FINAL_TASKS
    shouldRunAfter(copyDeps)
    inputs .dir(absoluteOutputLibDir)   // always run
    doLast {
        Collection<String> inDir = layout.files {
            file(absoluteOutputLibDir).listFiles()
        }.collect { it.name }

        Collection<String> required = configurations.runtimeClasspath.collect { it.name }

        Collection<String> toDelete = (inDir - required).collect { "$absoluteOutputLibDir/$it" as String }

        println 'Deleting unneeded files...'
        toDelete.each { println "- $it" }
        delete {
            delete toDelete
        }
    }
}

task moveMainJar { group = FINAL_TASKS
    dependsOn(':bot:build')
    shouldRunAfter(removeUnneeded)
    inputs .dir(absoluteOutputLibDir)   // always run
    doLast {
        String jarName = bot_archive_name
        if (jarName == null || jarName.blank){
            println("jarName is blank!")
            return
        }
        if (!file("$absoluteOutputLibDir/$jarName").exists()){
            return
        }
        copy {
            from "$absoluteOutputLibDir/$jarName"
            into absoluteOutputDir
        }
        delete {
            delete "$absoluteOutputLibDir/$jarName"
        }
    }
}

tasks.findAll { it.group == FINAL_TASKS }.each {
    it.dependsOn(build)
    subprojects.each { pr -> it.dependsOn(":${pr.name}:build") }
    build.finalizedBy(it)
}
